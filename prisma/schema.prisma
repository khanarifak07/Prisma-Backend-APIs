// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  username     String
  email        String   @unique
  password     String
  avatar       String
  coverImage   String?  
  role         Role     @default(USER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  refreshToken String?
  profile      Profile?
  Post         Post[]
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Post {
  id         Int        @id @default(autoincrement())
  title      String
  published  Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  authorId   Int
  author     User       @relation(fields: [authorId], references: [id])
  categories Category[]
}

model Category {
  id    String @id @default(uuid())
  name  String
  posts Post[]
}

enum Role {
  USER
  ADMIN
}

// model User {
//   firstName String
//   lastName  String
//   profile   Profile?

//   @@id([firstName, lastName]) //so when we have multi fields primary key
// }

// // so now we want fistName and lastName as foreignKey
// //then we have multi fileds foreign key here
// model Profile {
//   userFirstName String
//   userLastName  String
//   user          User   @relation(fields: [userFirstName, userLastName], references: [firstName, lastName])

//   @@unique([userFirstName, userLastName])
// }
